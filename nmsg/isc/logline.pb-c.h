/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_logline_2eproto__INCLUDED
#define PROTOBUF_C_logline_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _Nmsg__Isc__LogLine Nmsg__Isc__LogLine;


/* --- enums --- */


/* --- messages --- */

struct  _Nmsg__Isc__LogLine
{
  ProtobufCMessage base;
  protobuf_c_boolean has_category;
  ProtobufCBinaryData category;
  protobuf_c_boolean has_message;
  ProtobufCBinaryData message;
};
#define NMSG__ISC__LOG_LINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&nmsg__isc__log_line__descriptor) \
    , 0,{0,NULL}, 0,{0,NULL} }


/* Nmsg__Isc__LogLine methods */
void   nmsg__isc__log_line__init
                     (Nmsg__Isc__LogLine         *message);
size_t nmsg__isc__log_line__get_packed_size
                     (const Nmsg__Isc__LogLine   *message);
size_t nmsg__isc__log_line__pack
                     (const Nmsg__Isc__LogLine   *message,
                      uint8_t             *out);
size_t nmsg__isc__log_line__pack_to_buffer
                     (const Nmsg__Isc__LogLine   *message,
                      ProtobufCBuffer     *buffer);
Nmsg__Isc__LogLine *
       nmsg__isc__log_line__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   nmsg__isc__log_line__free_unpacked
                     (Nmsg__Isc__LogLine *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Nmsg__Isc__LogLine_Closure)
                 (const Nmsg__Isc__LogLine *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor nmsg__isc__log_line__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_logline_2eproto__INCLUDED */
