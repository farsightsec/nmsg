<?xml version="1.0" encoding="utf-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="en">
  <refmeta>
    <refentrytitle>nmsgtool</refentrytitle>
    <manvolnum>1</manvolnum>
    <refmiscinfo class="source"> </refmiscinfo>
    <refmiscinfo class="manual"> </refmiscinfo>
    <refmiscinfo class="version"> </refmiscinfo>
  </refmeta>

  <refnamediv>
    <refname>nmsgtool</refname>
    <refpurpose>command line interface to libnmsg</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <cmdsynopsis>
      <command>nmsgtool</command>
      <arg rep="repeat">
        <replaceable class="parameter">OPTIONS</replaceable>
      </arg>
    </cmdsynopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>DESCRIPTION</title>

    <para><command>nmsgtool</command> is the command line interface to
    libnmsg, the reference implementation of the NMSG binary
    structured message interchange format.</para>

    <para>The NMSG format is an efficient encoding of typed,
    structured data into payloads which are packed into containers
    which can be transmitted over the network or stored to disk. Each
    payload is associated with a specific message schema. Modules
    implementing a certain message schema along with functionality to
    convert between binary and presentation formats can be loaded at
    runtime by libnmsg. <command>nmsgtool</command> provides a command
    line interface to control the transmission, storage, creation, and
    conversion of NMSG payloads.</para>

    <para><command>nmsgtool</command> is a thin wrapper around
    libnmsg's I/O engine. In order to run, <command>nmsgtool</command>
    needs to open at least one input and at least one output. The
    supported input types are:</para>

    <itemizedlist>
      <listitem>
        <para>Reading binary NMSG data from a file or socket. See the
        <option>-r</option>, <option>-l</option> options.</para>
      </listitem>
      <listitem>
        <para>Reassembled IP datagrams from a network interface or
  <citerefentry><refentrytitle><command>pcap-savefile</command></refentrytitle><manvolnum>5</manvolnum></citerefentry>
  file. See the <option>-i</option>, <option>-p</option> options.</para>
      </listitem>
      <listitem>
        <para>Reading ASCII presentation form data from a file. See
        the <option>-f</option> option.</para>
      </listitem>
    </itemizedlist>

    <para>Once input data has been read or converted to NMSG format
    internally with the help of an external module (in the case of
    pcap or ASCII data), it is striped or mirror across one or more
    outputs. The supported output types are:</para>

    <itemizedlist>
      <listitem>
        <para>Writing binary NMSG data to a file or socket. See the
        <option>-w</option>, <option>-s</option> options.</para>
      </listitem>
      <listitem>
        <para>Writing ASCII presentation form data to a file. See the
        <option>-o</option> option.</para>
      </listitem>
    </itemizedlist>

    <para>Reading or writing data in a non-NMSG format requires the
    use of an external module (called an "nmsgpb module") to convert
    to or from NMSG format. <command>nmsgtool</command> selects an
    nmsgpb module based on a vendor ID and message type. For input
    data, these fields must be set with the <option>-V</option> and
    <option>-T</option> options.</para>

    <para>If one or more inputs have been specified but no outputs
    have been specified, an implicit output of presentation form data
    to stdout will be assumed.</para>

    <para>See the nmsg developer documentation for details on the NMSG
    wire format, how to interface with the nmsg library, and how to
    extend nmsg with new message types.</para>

  </refsect1>

  <refsect1>
    <title>OPTIONS</title>

    <variablelist>

      <varlistentry>
        <term><option>-h</option></term>
        <term><option>--help</option></term>
        <listitem>
          <para>Display help text and exit.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-d</option></term>
        <term><option>--debug</option></term>
        <listitem>
          <para>Increment debugging level. <option>-dd</option> is
          verbose and <option>-dddd</option> is very verbose.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-V</option> <replaceable>vendor</replaceable></term>
        <term><option>--vendor</option> <replaceable>vendor</replaceable></term>
        <listitem>
          <para>Set the vendor field of generated NMSG payloads to the
          vendor identified by <replaceable>vname</replaceable>. This
          is a symbolic string whose allowed values are determined at
          runtime when nmsgpb modules are loaded.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-T</option> <replaceable>msgtype</replaceable></term>
        <term><option>--msgtype</option> <replaceable>msgtype</replaceable></term>
        <listitem>
          <para>Set the message type field of generated NMSG payloads
          to the message type identified by
          <replaceable>msgtype</replaceable>. This is a symbol string
          whose allowed values are determined at runtime when nmsgpb
          modules are loaded.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-e</option> <replaceable>endline</replaceable></term>
        <term><option>--endline</option> <replaceable>endline</replaceable></term>
        <listitem>
          <para>Set the string to be used for the end-of-line
          continuation separator. By default this value is set to the
          newline character. This option understands the escape sequences
          <option>'\n'</option> (newline), <option>'\t'</option>
          (tab), and <option>'\\'</option> (backslash). Setting this
          option to <option>' \\\n\t'</option> will emulate the line
          continuation behavior of <command>ncaptool</command>.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-m</option> <replaceable>mtu</replaceable></term>
        <term><option>--mtu</option> <replaceable>mtu</replaceable></term>
        <listitem>
          <para>Set the "maximum transmission unit" for writes to
          datagram socket outputs. Note that this option is somewhat
          misnamed since it does not refer to protocol data units of
          IP but to NMSG containers, so the additional small but bounded
          overhead of the UDP and NMSG headers need to be taken into
          account. Since NMSG's UDP transport is tuned for operation
          on jumbo Ethernet, this value defaults to
          <replaceable>8192</replaceable>. To avoid IP fragmentation
          over standard Ethernet or Internet transport, this value
          should be lowered to around <replaceable>1280</replaceable>
          to <replaceable>1400</replaceable>.</para>

          <para>This option does not limit the maximum size of an NMSG
          payload because NMSG containers can be segmented into
          multiple datagrams.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-c</option> <replaceable>count</replaceable></term>
        <term><option>--count</option> <replaceable>count</replaceable></term>
        <listitem>
          <para>Stop the process or (with <option>-k</option>
          specified) reopen outputs after
          <replaceable>count</replaceable> payloads have been
          processed. Note that each output keeps its own payload
          output counter and this value refers to that per-output
          value and not to the sum of all output counters.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-t</option> <replaceable>secs</replaceable></term>
        <term><option>--interval</option> <replaceable>secs</replaceable></term>
        <listitem>
          <para>Stop the process or (with <option>-k</option>
          specified) reopen outputs on a time interval modulo the
          <replaceable>secs</replaceable> parameter. For example,
          <replaceable>-t 3600</replaceable> means "on the hour".</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-R</option></term>
        <term><option>--randomize</option></term>
        <listitem>
          <para>Randomize the initial offset within the interval that the
          process is stopped or outputs are reopened.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-k</option> <replaceable>cmd</replaceable></term>
        <term><option>--kicker</option> <replaceable>cmd</replaceable></term>
        <listitem>
          <para>Make <option>-c</option> and <option>-t</option>
          continuous. In this mode output file names are suffixed with
          a timestamp and <command>nmsgtool</command> runs
          continuously, rotating output files as payload counts or
          time intervals expire. <replaceable>cmd</replaceable>
          specifies the command to run on output files after
          rotation. If <replaceable>cmd</replaceable> is set to the
          empty string '', then no command is executed and only file
          rotation is performed.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-b</option> <replaceable>filter</replaceable></term>
        <term><option>--bpf</option> <replaceable>filter</replaceable></term>
        <listitem>
          <para>Filter pcap inputs (<option>-p</option> or
          <option>-i</option>) with the BPF expression
          <replaceable>filter</replaceable>. Note that libnmsg's pcap
          input is designed for IP datagrams and not network frames,
          so the filter specified by <option>-b</option> will be
          munged internally into several forms in order to receive IP
          fragments and filter the reassembled IP
          datagrams. Internally, IPv4 and IPv6 packets are selected
          for processing, including those received in VLAN tagged frames.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-F</option> <replaceable>dso</replaceable><optional>,<replaceable>param</replaceable></optional></term>
        <term><option>--filter</option> <replaceable>dso</replaceable><optional>,<replaceable>param</replaceable></optional></term>
        <listitem>
          <para>Filter nmsg payloads with a module loaded from the given DSO
          file. The <replaceable>dso</replaceable> specified may either be a
          short, human friendly name (like <replaceable>sample</replaceable>)
          which will be expanded into an absolute filename in the default
          system-wide libnmsg module path, or it may be a name beginning with
          <replaceable>/</replaceable> or <replaceable>.</replaceable> (like
          <replaceable>/usr/lib/nmsg/nmsg_flt1_sample.so</replaceable>), in
          which case the <replaceable>dso</replaceable> value will be treated as
          an absolute or relative path name.</para>

          <para>Filter modules may take a module-defined parameter string
          <replaceable>param</replaceable>. The <replaceable>dso</replaceable>
          value may be followed by a comma, in which case everything after the
          comma is treated as the module parameter
          <replaceable>param</replaceable> and passed to the module's
          initialization function. Some modules may require a
          <replaceable>param</replaceable> value or may perform additional
          validation on the parameter. If the module fails to initialize,
          <command>nmsgtool</command> will exit with an error message.</para>

          <para>This option can be specified more than once, in which case the
          filter modules will be loaded in the order they were specified in on
          the command-line, and will form a linear filter chain.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>--policy</option> <option>ACCEPT</option>|<option>DROP</option></term>
        <listitem>
          <para>If any filter modules have been loaded with <option>-F</option>,
          <option>--policy</option> may be used to specify the policy action to
          take if all filters in the filter chain decline to handle a given
          message. The default policy action is <option>--policy ACCEPT</option>,
          which causes messages that are declined by the filter chain to be
          accepted into the output stream. If <option>--policy DROP</option> is
          specified, any messages which are declined by the filter chain will be
          silently discarded.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-r</option> <replaceable>file</replaceable></term>
        <term><option>--readnmsg</option> <replaceable>file</replaceable></term>
        <listitem>
          <para>Read NMSG payloads from a file.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-f</option> <replaceable>file</replaceable></term>
        <term><option>--readpres</option> <replaceable>file</replaceable></term>
        <listitem>
          <para>Read presentation format data from a file and convert
          to NMSG payloads. This option is dependent on the
          <option>-V</option> and <option>-T</option> options being
          set in order to select a specific nmsgpb module to perform
          presentation format to NMSG payload conversion. Not all nmsgpb
          modules necessarily support this conversion method, in which
          case <command>nmsgtool</command> will print a "function not
          implemented" message.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-j</option> <replaceable>file</replaceable></term>
        <term><option>--readjson</option> <replaceable>file</replaceable></term>
        <listitem>
          <para>Read JSON format data from a file. See documentation for
          <option>--writejson</option> for format details.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-l</option> <replaceable>addr</replaceable>/<replaceable>port</replaceable></term>
        <term><option>--readsock</option> <replaceable>addr</replaceable>/<replaceable>port</replaceable></term>
        <listitem>
          <para>Read NMSG payloads from a UDP socket. The
          <replaceable>addr</replaceable> parameter must be set to
          a valid system or broadcast IPv4 or IPv6 address and the
          <replaceable>port</replaceable> parameter may be a single
          port number or a range of ports in the form
          <replaceable>port0..portN</replaceable>.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-C</option> <replaceable>channel</replaceable></term>
        <term><option>--readchan</option> <replaceable>channel</replaceable></term>
        <listitem>
          <para>Read NMSG payloads from one or more UDP sockets
          specified by an alias
          <replaceable>channel</replaceable>. <command>nmsgtool</command>
          will read aliases from the file named
          <filename>nmsgtool.chalias</filename> in the system
          configuration directory (usually
          <filename>/usr/local/etc</filename> or
          <filename>/etc</filename>). The format of this file is one
          alias per line with each line starting with the alias name
          <replaceable>channel</replaceable> followed by one or more
          whitespace delimited
          <replaceable>address</replaceable>/<replaceable>port</replaceable>
          entries (as would be parsed by the
          <option>--readsock</option> option).</para>

          <para>For example, the following alias file would create two
          channels. Calling <command>nmsgtool</command> with
          <replaceable>-C 123</replaceable> would be equivalent to calling
          <command>nmsgtool</command> with <replaceable>-l
          192.0.2.1/8430</replaceable> while <replaceable>-C
          234</replaceable> would be equivalent to <replaceable>-l
          192.0.2.255/8430..8437 -l 192.0.2.255/9430</replaceable>.</para>

          <example>
            <title>nmsgtool.chalias example</title>
            <programlisting>123 192.0.2.1/8430
234 192.0.2.255/8430..8437 192.0.2.255/9430
</programlisting>
          </example>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-L</option> <replaceable>xep</replaceable></term>
        <term><option>--readxsock</option> <replaceable>xep</replaceable></term>
        <listitem>
          <para>Read NMSG payloads from a Crossroads I/O endpoint. The endpoint <replaceable>xep</replaceable> is very similar to the "transport://address" specifiers used by the libxs library, except that additional configuration may be needed in order to set up the XS connection, which is specified by appending comma-separated arguments. See the xs_tcp(7) and xs_ipc(7) manpages for details.</para>
          <para>In addition to the base "transport://address" specifier, the user may specifically select between a bound or connected XS socket by appending ",accept" or ",connect" to the <replaceable>xep</replaceable> argument. (If not given, nmsgtool behaves as if ",connect" was given.) That is, ",accept" uses the xs_bind(3) function to obtain an XS endpoint, and ",connect" uses the xs_connect(3) function.</para>
          <para>The user may also select between the Crossroads I/O PUB/SUB and PUSH/PULL messaging patterns by appending either ",pubsub" or ",pushpull". (If not given, nmsgtool behaves as if ",pubsub" was passed.) See the xs_socket(3) manpage for details. When PUB/SUB is used with <option>-L</option>, nmsgtool participates in the "SUB" role of the Crossroads I/O PUB/SUB messaging pattern, and when PUSH/PULL is used, nmsgtool participates in the "PULL" role.</para>
          <para>Examples of possible <replaceable>xep</replaceable> arguments to <option>-L</option> include "ipc:///tmp/nmsg.sock,accept,pubsub" to indicate a Crossroads I/O endpoint that accepts PUB/SUB connections on the IPC path /tmp/nmsg.sock (in the SUB role), and "tcp://127.0.0.1:5555,accept,pushpull" to indicate a Crossroads I/O endpoint that listens for PUSH/PULL connections on the TCP socket 127.0.0.1:5555 (in the PULL role).</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-S</option> <replaceable>xep</replaceable></term>
        <term><option>--writexsock</option> <replaceable>xep</replaceable></term>
        <listitem>
          <para>Write NMSG payloads to a Crossroads X/O endpoint. The endpoint <replaceable>xep</replaceable> is very similiar to the "transport://address" specifiers used by the libxs library, except that additional configuration may be needed in order to set up the XS connection, which is specified by appending comma-separated arguments. See the xs_tcp(7) and xs_ipc(7) manpages for details.</para>
          <para>In addition to the base "transport://address" specifier, the user may specifically select between a bound or connected XS socket by appending ",accept" or ",connect" to the <replaceable>xep</replaceable> argument. (If not given, nmsgtool behaves as if ",connect" was given.) That is, ",accept" uses the xs_bind(3) function to obtain an XS endpoint, and ",connect" uses the xs_connect(3) function.</para>
          <para>The user may also select between the Crossroads I/O PUB/SUB and PUSH/PULL messaging patterns by appending either ",pubsub" or ",pushpull". (If not given, nmsgtool behaves as if ",pubsub" was passed.) See the xs_socket(3) manpage for details. When PUB/SUB is used with <option>-S</option>, nmsgtool participates in the "PUB" role of the Crossroads I/O PUB/SUB messaging pattern, and when PUSH/PULL is used, nmsgtool participates in the "PUSH" role.</para>
          <para>Examples of possible <replaceable>xep</replaceable> arguments to <option>-S</option> include "ipc:///tmp/nmsg.sock,connect,pubsub" to indicate a Crossroads I/O endpoint that connects to a PUB/SUB socket on the IPC path /tmp/nmsg.sock (in the PUB role), and "tcp://127.0.0.1:5555,connect,pushpull" to indicate a Crossroads I/O endpoint that connects to a PUSH/PULL socket on the TCP socket 127.0.0.1:5555 (in the PULL role).</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-p</option> <replaceable>file</replaceable></term>
        <term><option>--readpcap</option> <replaceable>file</replaceable></term>
        <listitem>
          <para>Read IP packets from a
    <citerefentry><refentrytitle><command>pcap-savefile</command></refentrytitle><manvolnum>5</manvolnum> </citerefentry>
    file <replaceable>file</replaceable> using the
    <citerefentry><refentrytitle><command>pcap</command></refentrytitle><manvolnum>3</manvolnum></citerefentry>
          library. These packets are then reassembled into datagrams
          which are then passed to an nmsgpb module for conversion
          into NMSG payloads. This option is dependent on the
          <option>-V</option> and <option>-T</option> options being
          set in order to select a specific nmsgpb module to perform
          IP datagram to NMSG payload conversion. Not all nmsgpb
          modules necessarily support this conversion method, in which
          case <command>nmsgtool</command> will print a "function not
          implemented" message.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-i</option> <replaceable>if</replaceable><optional>+</optional><optional>,<replaceable>snap</replaceable></optional></term>
        <listitem>
          <para>Read IP packets from a network interface
          <replaceable>if</replaceable> using the
<citerefentry><refentrytitle><command>pcap</command></refentrytitle><manvolnum>3</manvolnum></citerefentry>
          library. Reassembly is performed as described for
          <option>--readpcap</option>. <replaceable>+</replaceable>
          may be appended to the interface name to capture in
          promiscuous mode. The capture length
          <replaceable>snap</replaceable> may be set by appending
          ,<replaceable>snap</replaceable>. The default capture length
          is <replaceable>1522</replaceable>. <option>-V</option> and
          <option>-T</option> are required.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-w</option> <replaceable>file</replaceable></term>
        <term><option>--writenmsg</option> <replaceable>file</replaceable></term>
        <listitem>
          <para>Write NMSG payloads to a file.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-o</option> <replaceable>file</replaceable></term>
        <term><option>--writepres</option> <replaceable>file</replaceable></term>
        <listitem>
          <para>Write presentation format payloads to a file.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-J</option> <replaceable>file</replaceable></term>
        <term><option>--writejson</option> <replaceable>file</replaceable></term>
        <listitem>
          <para>Write JSON payloads to a file.</para>
          <para>Payloads are rendered as JSON dictionaries with keys:  </para>
             <itemizedlist>
                <listitem>
                    <para>time: the payload timestamp </para>
                </listitem>
                <listitem>
                    <para>vname: the vendor name identifying the message
                    type</para>
                </listitem>
                <listitem>
                    <para>mname: the message type name identifying the
                    message type</para>
                </listitem>
                <listitem>
                    <para>source: the message source, if present, as
        l           a hexadecimal string</para>
                </listitem>
                <listitem>
                    <para>group, operator: the group and operator names
                    or numbers, if present.</para>
                </listitem>
                <listitem>
                    <para>message: a dictionary of message fields and
                    values</para>
                </listitem>
             </itemizedlist>
        <para> The value of associated with the 'message' key is a
        JSON dictionary of the message fields. Enumerated types are
        translated to string representation, if possible. Binary data
        is base64 encoded and output as a string. Invalid UTF-8 sequences
        in string fields are replaced with U+FFFD. </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-s</option> <replaceable>addr</replaceable>/<replaceable>port</replaceable><optional>,<replaceable>rate</replaceable><optional>,<replaceable>freq</replaceable></optional></optional></term>
        <term><option>--writesock</option> <replaceable>addr</replaceable>/<replaceable>port</replaceable><optional>,<replaceable>rate</replaceable><optional>,<replaceable>freq</replaceable></optional></optional></term>
        <listitem>
          <para>Write NMSG payloads to a UDP socket specified
          by the system or broadcast IPv4 or IPv6 address
          <replaceable>addr</replaceable> and the UDP port
          <replaceable>port</replaceable>. Optionally the output rate
          may be limited to <replaceable>rate</replaceable> per second
          by appending ,<replaceable>rate</replaceable>. If an output
          rate is specified, the scheduling frequency
          <replaceable>freq</replaceable> may be set by appending
          ,<replaceable>freq</replaceable>. The default scheduling
          frequency for rate limits is
          <replaceable>100</replaceable>.</para>

          <para>NMSG payloads are not immediately output to sockets
          but are instead concatenated into a buffer of a certain size
          (see the <option>--mtu</option> option) before being
          sent. To circumvent this behavior see the
          <option>--unbuffered</option> option.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-z</option></term>
        <term><option>--zlibout</option></term>
        <listitem>
          <para>Perform transparent zlib compression of written NMSG
          containers. This applies to both file (<option>-w</option>)
          and socket (<option>-s</option>) outputs.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>--mirror</option></term>
        <listitem>
          <para>Mirror NMSG payloads across data outputs. By default
          NMSG payloads regardless of input source are striped across
          all available outputs. When <option>--mirror</option> is
          set, NMSG payloads are duplicated to every output. This
          option has no effect if there is only a single output.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>--setsource</option> <replaceable>sonum</replaceable></term>
        <listitem>
          <para>Set the "source" field of output NMSG payloads to
          <replaceable>sonum</replaceable>.</para>

          <para>NMSG payloads have an optional "source" field which is
          meant to be used as a unique opaque identifier identifying
          the immediate source of a redistributed payload. The
          <replaceable>sonum</replaceable> value should be specified as
          an unsigned 32 bit integer in hexadecimal format with a
          leading "0x".</para>

          <para>In the <command>nmsg</command> presentation form
          output header, the source field is the fourth bracketed
          value.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>--getsource</option> <replaceable>sonum</replaceable></term>
        <listitem>
          <para>Filter the "source" field of input NMSG payloads
          against <replaceable>sonum</replaceable>.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>--setoperator</option> <replaceable>opname</replaceable></term>
        <listitem>
          <para>Set the "operator" field of output NMSG payloads to
          <replaceable>opname</replaceable>.</para>

          <para>NMSG payloads have an optional "operator" field which
          is meant to identify the operator generating a payload. The
          operator field is represented as a 32 bit integer on the
          wire but is aliased to a symbolic string for presentation
          purposes by the file <filename>nmsg.opalias</filename> in
          the system configuration directory. The alias file contains
          one number/name pair separated by whitespace per
          line.</para>

          <para>In the <command>nmsg</command> presentation form
          output header, the operator field is the fifth bracketed
          value.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>--getoperator</option> <replaceable>opname</replaceable></term>
        <listitem>
          <para>Filter the "operator" field of input NMSG payloads
          against <replaceable>opname</replaceable>.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>--setgroup</option> <replaceable>grname</replaceable></term>
        <listitem>
          <para>Set the "group" field of output NMSG payloads to
          <replaceable>grname</replaceable>.</para>

          <para>NMSG payloads have an optional "group" field which is
          meant to identify the campaign or group that a payload
          belongs to. The group field is represented as a 32 bit
          integer on the wire but is aliased to a symbolic string for
          presentation purposes by the file
          <filename>nmsg.gralias</filename> in the system
          configuration directory. The alias file contains one
          number/name pair separated by whitespace per line.</para>

          <para>In the <command>nmsg</command> presentation form
          output header, the group field is the sixth bracketed
          value.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>--getgroup</option> <replaceable>grname</replaceable></term>
        <listitem>
          <para>Filter the "group" name of input NMSG payloads against
          <replaceable>grname</replaceable>.</para>
        </listitem>
      </varlistentry>

    </variablelist>
  </refsect1>

  <refsect1>
    <title>EXAMPLES</title>

    <para>To read NMSG payloads from a socket and write presentation
    form data to stdout:</para>
    <programlisting><command>nmsgtool -l 192.0.2.1/8430</command></programlisting>

    <para>To read NMSG payloads from a file and write presentation
    form data to stdout:</para>
    <programlisting><command>nmsgtool -r /tmp/file.nmsg</command></programlisting>

    <para>To read NMSG payloads from a socket and write to a binary
    NMSG file:</para>
    <programlisting><command>nmsgtool -l 192.0.2.1/8430 -w /tmp/file.nmsg</command></programlisting>

    <para>To read reassembled IP datagrams from a network interface in
    promiscuous mode, convert these datagrams to NMSG using the
    base/ncap nmsgpb module, and write to a file:</para>
    <programlisting><command>nmsgtool -i eth0+ -V base -T ncap -w /tmp/ncapfile.nmsg</command></programlisting>

    <para>To read NMSG payloads from multiple socket inputs and write
    to a series of compressed files, rotated every hour:</para>
    <programlisting><command>nmsgtool -l 192.0.2.255/8430..8437 -w /tmp/file -t 3600 -k '' -z</command></programlisting>

    <para>To read NMSG payloads from a Crossroads I/O "PULL" socket over a TCP connection:</para>
    <programlisting><command>nmsgtool -L tcp://127.0.0.1:5555,accept,pushpull</command></programlisting>
    <para>This waits for TCP connections on 127.0.0.1:5555.</para>

    <para>To read NMSG payloads from a file and write them to a Crossroads I/O "PUSH" socket over a TCP connection:</para>
    <programlisting><command>nmsgtool -r /tmp/file.nmsg -S tcp://127.0.0.1:5555,connect,pushpull</command></programlisting>
    <para>This attempts to connect to a TCP reader on 127.0.0.1:5555, such as the nmsgtool command in the previous example.</para>

  </refsect1>

</refentry>
